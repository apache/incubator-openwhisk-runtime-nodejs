// def owPath = System.getenv("OPENWHISK_HOME") ?: '../open'
// def owDirectory = new File(owPath)
// 
// if (!owDirectory.exists()) {
//     throw new GradleScriptException("Environment variable OPENWHISK_HOME must point to a valid OpenWhisk build", null)
// }

//include 'common:scala'; project(':common:scala').projectDir = new File(owDirectory, 'common/scala')
//include 'core:controller'; project(':core:controller').projectDir = new File(owDirectory, 'core/controller')
//include 'core:invoker'; project(':core:invoker').projectDir = new File(owDirectory, 'core/invoker')
//include 'whisktests'; project(':whisktests').projectDir = new File(owDirectory, 'tests')

//include 'tests'

file('./docker-local.gradle').with() { 
    if (it.exists()) { 
        apply from: it 
    } else {
        gradle.ext.architectures = [ default: {} ]
    }
}

gradle.ext.dockerImages =
[
    ':core:nodejsActionBase': [
        'dockerImageName': 'nodejsactionbase'
    ],
    ':core:nodejs6Action': [
        'dockerImageName': 'nodejs6action'
    ],
    ':core:nodejs8Action': [
        'dockerImageName': 'action-nodejs-v8'
    ]
]

gradle.dockerImages.each() { baseProjectName, extensions -> 
    include baseProjectName
    def baseProject = findProject(baseProjectName)
    
    gradle.architectures.each() { architectureName, architectureClosure ->
        def architectureProjectName = "${baseProjectName}:${architectureName}"
        include architectureProjectName
        def architectureProject = findProject(architectureProjectName)
        
        logger.debug 'Setup baseProject: ' + baseProject?.path
        logger.debug 'Setup architectureProject: ' + architectureProject?.path
        
        architectureProject.projectDir = baseProject.projectDir
    }
}

rootProject.name = 'runtime-nodejs'

gradle.ext.openwhisk = [
        version: '1.0.0-SNAPSHOT'
]

gradle.ext.scala = [
    version: '2.11.11',
    compileFlags: ['-feature', '-unchecked', '-deprecation', '-Xfatal-warnings', '-Ywarn-unused-import']
]

gradle.ext.scalafmt = [
    version: '1.5.0',
    config: new File(rootProject.projectDir, '.scalafmt.conf')
]
